import platform
import wmi
import hashlib
import requests

from .. import log
logger = log.logger

class Collection:
    
    def __init__(self) -> None:
        """
        The function initializes an object with a hardware ID obtained using the `get_hwid` method.
        """
        self.hwid = self.get_hwid()
        
    def get_hwid(self) -> str:
        """
        The `get_hwid` function in Python retrieves hardware information such as motherboard, disk drives,
        and GPUs, and generates a unique hardware identifier using SHA-256 hashing.
        :return: The `get_hwid` function returns a unique hardware identifier (hwid) generated by hashing a
        string representation of various hardware information using the SHA-256 algorithm. The hardware
        information includes platform details (system, release, machine, processor, architecture), GPU
        details (name, adapter RAM), motherboard details (product, manufacturer), and disk drive details
        (model).
        """
        c = wmi.WMI()
        boards = []
        for board in c.Win32_BaseBoard():
            boards.append((board.Product, board.Manufacturer))
        
        disks = []
        for disk in c.Win32_DiskDrive():
            disks.append(disk.Model)
            
        gpus = []
        for gpu in c.Win32_VideoController():
            gpus.append((gpu.Name, gpu.AdapterRAM))
            
        hardware_info = \
            {
                "platform": platform.system(),
                "platform_release": platform.release(),
                "platform_machine": platform.machine(),
                "platform_processor": platform.processor(),
                "platform_architecture" : platform.architecture(),
                "gpu" : gpus,
                "boards" : boards,
                "disks" : disks
            }
        hardware_info_str = str(hardware_info)
        hwid = hashlib.sha256(hardware_info_str.encode('utf-8')).hexdigest()
        return hwid
    

class OnlineVerification:
    
    def __init__(self, hwid: str, license_key: str) -> None:        
        """
        The function initializes data with hardware ID and a valid part of the license key for verification.
        
        :param hwid: The `hwid` parameter likely stands for Hardware ID, which is a unique identifier for a
        specific piece of hardware. It is commonly used in software licensing and activation processes to
        tie a license to a specific machine
        :param license_key: The `license_key` parameter is a string that represents a license key used for
        verification
        """
        self.url = "https://api.lamic.top:8443/api/verify"
        self.data = {
            "hwid": hwid,
            "license_key" : self.extract_valid_part(license_key)
        }
        
        
    def extract_valid_part(self, s: str):
        """
        The function `extract_valid_part` takes a string `s` and returns the substring from the beginning of
        `s` up to (and including) the last occurrence of the character '=' if it exists, otherwise it
        returns the entire string `s`.
        
        :param s: The `extract_valid_part` function takes a string `s` as input and extracts the substring
        starting from the beginning of the string up to (and including) the last occurrence of the '='
        character in the string. If the '=' character is not found in the string, the function returns the
        original string
        :return: The `extract_valid_part` method returns the substring of the input string `s` starting from
        the beginning up to (and including) the last occurrence of the '=' character. If the '=' character
        is not found in the string, the method returns the original string `s`.
        """
        last_equal_index = s.rfind('=')
        return s[:last_equal_index+1] if last_equal_index != -1 else s
    
    def send_requests(self) -> bool:
        """
        This Python function sends a POST request with JSON data, verifies SSL certificate, and returns a
        boolean based on the response status code and SSL validation.
        :return: The `send_requests` method returns a boolean value. It returns `True` if the SSL
        certificate validation is successful and the response data contains a key "pass" with a truthy
        value. It returns `False` in case of any exceptions during the request or if the status code of the
        response is not 200.
        """
        logger.info("正在验证身份")
        try:
            self.response = requests.post(self.url, json=self.data, timeout=5, verify=True)
            if self.response.status_code == 200:
                self.response_data = self.response.json()
                logger.info("ssl证书验证成功")
                return self.response_data["pass"]
            else:
                return False
        except requests.exceptions.SSLError:
            logger.error(f"ssl证书验证失败, 不被允许的自签证书")
            return False
    

if __name__ == "__main__":
    logger.info(f"验证通过情况 : {OnlineVerification(Collection().hwid, input('key>')).send_requests()}")
    input('按下回车退出...')
        
